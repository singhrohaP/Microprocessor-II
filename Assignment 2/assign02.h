#ifndef ASSIGN02_HEADER
#define ASSIGN02_HEADER

// morse code dictionary : item 0 as the letter in ascii, items 1 - 6 as morse code
char codeDict[36][7] = {
    {'A', '.', '-', '\0', '\0', '\0', '\0'},
    {'B', '-', '.', '.', '.', '\0', '\0'},
    {'C', '-', '.', '-', '.', '\0', '\0'},
    {'D', '-', '.', '.', '\0', '\0', '\0'},
    {'E', '.', '\0', '\0', '\0', '\0', '\0'},
    {'F', '.', '.', '-', '.', '\0', '\0'},
    {'G', '-', '-', '.', '\0', '\0', '\0'},
    {'H', '.', '.', '.', '.', '\0', '\0'},
    {'I', '.', '.', '\0', '\0', '\0', '\0'},
    {'J', '.', '-', '-', '-', '\0', '\0'},
    {'K', '-', '.', '-', '\0', '\0', '\0'},
    {'L', '.', '-', '.', '.', '\0', '\0'},
    {'M', '-', '-', '\0', '\0', '\0', '\0'},
    {'N', '-', '.', '\0', '\0', '\0', '\0'},
    {'O', '-', '-', '-', '\0', '\0', '\0'},
    {'P', '.', '-', '-', '.', '\0', '\0'},
    {'Q', '-', '-', '.', '-', '\0', '\0'},
    {'R', '.', '-', '.', '\0', '\0', '\0'},
    {'S', '.', '.', '.', '\0', '\0', '\0'},
    {'T', '-', '\0', '\0', '\0', '\0', '\0'},
    {'U', '.', '.', '-', '\0', '\0', '\0'},
    {'V', '.', '.', '.', '-', '\0', '\0'},
    {'W', '.', '-', '-', '\0', '\0', '\0'},
    {'X', '-', '.', '.', '-', '\0', '\0'},
    {'Y', '-', '.', '-', '-', '\0', '\0'},
    {'Z', '-', '-', '.', '.', '\0', '\0'},
    {'1', '.', '-', '-', '-', '-', '\0'},
    {'2', '.', '.', '-', '-', '-', '\0'},
    {'3', '.', '.', '.', '-', '-', '\0'},
    {'4', '.', '.', '.', '.', '-', '\0'},
    {'5', '.', '.', '.', '.', '.', '\0'},
    {'6', '-', '.', '.', '.', '.', '\0'},
    {'7', '-', '-', '.', '.', '.', '\0'},
    {'8', '-', '-', '-', '.', '.', '\0'},
    {'9', '-', '-', '-', '-', '.', '\0'},
    {'0', '-', '-', '-', '-', '-', '\0'},
};
char wordDict[16][4] = {
    {"CAT\0"},
    {"DOG\0"},
    {"ANT\0"},
    {"LEG\0"},
    {"EAR\0"},
    {"CAR\0"},
    {"GAS\0"},
    {"DAY\0"},
    {"FOX\0"},
    {"RED\0"},
    {"VAN\0"},
    {"BOY\0"},
    {"HIT\0"},
    {"JAM\0"},
    {"ZIP\0"},
    {"SEQ\0"}};

// Predeclaration of the functions needed in assign02.c
void main_asm();
void watchdog_update(void);
void watchdog_enable(uint32_t delay_ms, bool pause_on_debug);

#endif
